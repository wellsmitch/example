/**
 * ES6 Proxy Polyfill
 * @version 1.2.1
 * @author Ambit Tsai <ambit_tsai@qq.com>
 * @license Apache-2.0
 * @see {@link https://github.com/ambit-tsai/es6-proxy-polyfill}
 */
!function(t){if(!t.Proxy){var n=function(){},a=Object.assign||n,c=Object.getPrototypeOf||n,i=Object.setPrototypeOf||n;u.prototype.$call=function(t,n){var o=this.target,r=this.handler;return r||p("Cannot perform 'call' on a proxy that has been revoked"),null==r.apply?o.apply(t,n):"function"==typeof r.apply?r.apply(o,t,n):void p("Proxy handler's apply trap must be a function")},u.prototype.$construct=function(t,n){var o,r=this.target,e=this.handler;if(e||p("Cannot perform 'construct' on a proxy that has been revoked"),null==e.construct)return(o=r.apply(t,n))instanceof Object?o:t;if("function"==typeof e.construct){if((o=e.construct(r,n))instanceof Object)return o;p("Proxy handler's construct trap must return an object")}else p("Proxy handler's construct trap must be a function")},Proxy.revocable=function(t,n){var o={};return o.proxy=r(t,n,o),o},t.Proxy=Proxy}function p(t){throw new TypeError(t)}function u(t,n){this.target=t,this.handler=n}function r(t,n,o){"function"!=typeof t?p("Proxy polyfill only support function target"):n instanceof Object||p("Cannot create proxy with a non-object handler");var r=new u(t,n);function e(){return this instanceof e?r.$construct(this,arguments):r.$call(this,arguments)}return a(e,t),e.prototype=t.prototype,i(e,c(t)),o&&(o.revoke=function(){for(var t in r.target=null,r.handler=null,e)e.hasOwnProperty(t)&&delete e[t];e.prototype={},i(e,{})}),e}function Proxy(t,n){if(this instanceof Proxy)return r(t,n);p("Constructor Proxy requires 'new'")}}("object"==typeof window?window:"object"==typeof global?global:this);
